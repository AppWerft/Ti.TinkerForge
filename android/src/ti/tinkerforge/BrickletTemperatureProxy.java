/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.tinkerforge;

import java.io.IOException;
import java.net.UnknownHostException;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiProperties;

import com.tinkerforge.AlreadyConnectedException;
import com.tinkerforge.BrickletTemperature;
import com.tinkerforge.IPConnection;
import com.tinkerforge.NotConnectedException;
import com.tinkerforge.TinkerforgeException;

// This proxy can be created by calling Tinkerforge.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TinkerforgeModule.class)
public class BrickletTemperatureProxy extends KrollProxy {

	private final class ConnectedHandler implements
			IPConnection.ConnectedListener {
		public void connected(short connectReason) {
			switch (connectReason) {
			case IPConnection.CONNECT_REASON_REQUEST:
				System.out.println("Connected by request");
				break;

			case IPConnection.CONNECT_REASON_AUTO_RECONNECT:
				System.out.println("Auto-Reconnect");
				break;
			}

			// Authenticate first...
			try {
				ipcon.authenticate("");
				System.out.println("Authentication succeeded");
			} catch (TinkerforgeException e) {
				System.out.println("Could not authenticate: " + e.getMessage());
				return;
			}

			// ...then trigger enumerate
			try {
				ipcon.enumerate();
			} catch (TinkerforgeException e) {
			}
		}
	}

	// Standard Debugging variables
	private static final String LCAT = "TiFo";
	private String ip = "localhost";
	private int port = 4223;
	private IPConnection ipcon;
	private String UID;
	public KrollProxy proxy = null;
	private BrickletTemperature bricklet;

	public BrickletTemperatureProxy(KrollProxy proxy) {
		super();
		this.proxy = proxy;
	}

	private void readArgs(Object[] args) {
		if (args.length != 2) {
			Log.d(LCAT, "two paramters (UID + endpoint) aspected");
			return;
		}
		if (!(args[0] instanceof String)) {
			Log.d(LCAT, "UID is missing");
			return;
		}
		if (!(args[1] instanceof String)) {
			Log.d(LCAT, "endpoint is missing");
			return;
		}

		if (args[0] instanceof String) {
			this.UID = (String) args[0];
		}
		if (args[1] instanceof String) {
			String[] parts = ((String) args[1]).split(":");
			if (parts != null) {
				this.ip = parts[0];
				this.port = Integer.parseInt(parts[1]);
			}
		}
	}

	@Override
	public void handleCreationArgs(KrollModule createdInModule, Object[] args) {
		readArgs(args);
		connectBricklet();
		BrickletTemperature bricklet = new BrickletTemperature(UID, ipcon); // Create
		// device
		// object

	}

	@Kroll.method
	public void getTemperature() {

	}

	private void connectBricklet() {
		ipcon = new IPConnection();
		try {
			ipcon.connect(ip, port);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (AlreadyConnectedException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// Register enumerate listener and print incoming information
		ipcon.addConnectedListener(new ConnectedHandler());

	}

	@Kroll.method
	public void disconnect() {
		try {
			this.ipcon.disconnect();
		} catch (NotConnectedException e) {
			e.printStackTrace();
		}
	}
}