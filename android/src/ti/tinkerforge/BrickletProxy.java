/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.tinkerforge;

import java.io.IOException;
import java.net.UnknownHostException;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiProperties;

import com.tinkerforge.AlreadyConnectedException;
import com.tinkerforge.IPConnection;
import com.tinkerforge.NotConnectedException;
import com.tinkerforge.TinkerforgeException;

// This proxy can be created by calling Tinkerforge.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TinkerforgeModule.class)
public class BrickletTemperature extends KrollProxy {
	private final class ConnectedHandler implements
			IPConnection.ConnectedListener {
		public void connected(short connectReason) {
			switch (connectReason) {
			case IPConnection.CONNECT_REASON_REQUEST:
				System.out.println("Connected by request");
				break;

			case IPConnection.CONNECT_REASON_AUTO_RECONNECT:
				System.out.println("Auto-Reconnect");
				break;
			}

			// Authenticate first...
			try {
				ipcon.authenticate("");
				System.out.println("Authentication succeeded");
			} catch (TinkerforgeException e) {
				System.out.println("Could not authenticate: " + e.getMessage());
				return;
			}

			// ...then trigger enumerate
			try {
				ipcon.enumerate();
			} catch (TinkerforgeException e) {
			}
		}
	}

	// Standard Debugging variables
	private static final String LCAT = "TiFo";
	private static final String TF = "TINKERFORGE_ENDPOINT";

	private String ip = "localhost";
	private int port = 4223;
	private KrollFunction onLoadCallback;
	private IPConnection ipcon;
	final KrollProxy proxy;
	private HashMap<String, KrollDict> devices;
	TiProperties props;

	public BrickletTemperature(KrollProxy proxy) {
		super();
		this.proxy = proxy;
		this.props = TiApplication.getInstance().getAppProperties();

	}

	// Handle creation options
	@Override
	public void handleCreationArgs(KrollModule createdInModule, Object[] args) {
		if (args.length == 0) {
			Log.d(LCAT, "uid is missing");
			return;
		} else if (args.length == 1) {
			getCacheEndpointFromProps();
			if (args[0] instanceof String) {
				String ep = (String) args[0];
				String[] parts = ep.split(":");
				if (parts != null) {
					this.ip = parts[0];
					this.port = Integer.parseInt(parts[1]);
				}
				this.props.setString(TF, this.ip + ":" + this.port);
			}
		}

	}

	private void cacheEndpointToProps(String ep) {

		this.props.setString(TF, this.ip + ":" + this.port);
	}

	private void getCacheEndpointFromProps() {
		String ep = this.props.getString(TF, this.ip + ":" + this.port);
		String[] parts = ep.split(":");
		if (parts != null) {
			this.ip = parts[0];
			this.port = Integer.parseInt(parts[1]);
		}
	}

	private void connect() {
		ipcon = new IPConnection();
		try {
			ipcon.connect(ip, port);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (AlreadyConnectedException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		cacheEndpointToProps();
		// Register enumerate listener and print incoming information
		ipcon.addEnumerateListener(new EnumeratedHandler());
		ipcon.addConnectedListener(new ConnectedHandler());
		try {
			ipcon.enumerate();
		} catch (NotConnectedException e) {
			e.printStackTrace();
		}

	}

	@Kroll.method
	public void disconnect() {
		try {
			this.ipcon.disconnect();
		} catch (NotConnectedException e) {
			e.printStackTrace();
		}
	}
}