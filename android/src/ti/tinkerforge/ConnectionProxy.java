/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.tinkerforge;

import java.io.IOException;
import java.net.UnknownHostException;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiProperties;

import com.tinkerforge.AlreadyConnectedException;
import com.tinkerforge.IPConnection;
import com.tinkerforge.NotConnectedException;
import com.tinkerforge.TinkerforgeException;

// This proxy can be created by calling Tinkerforge.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TinkerforgeModule.class)
public class ConnectionProxy extends KrollProxy {

	private String ip = "localhost";
	private int port = 4223;
	private KrollFunction onEnumeratedCallback;
	private KrollFunction onConnectedCallback;
	private IPConnection ipcon;
	final KrollProxy proxy;
	final public String LCAT = "TiFo ðŸš§";
	private HashMap<String, KrollDict> devices;
	TiProperties props;

	private final class ConnectedHandler implements
			IPConnection.ConnectedListener {
		public void connected(short connectReason) {
			switch (connectReason) {
			case IPConnection.CONNECT_REASON_REQUEST:
				if (obConnected)
					break;
			case IPConnection.CONNECT_REASON_AUTO_RECONNECT:
				break;
			}

			TiProperties appProperties = TiApplication.getInstance()
					.getAppProperties();
			if (appProperties.hasProperty("TIFORGE_SECRET")) {
				try {
					ipcon.authenticate(appProperties.getString(
							"TIFORGE_SECRET", ""));
				} catch (TinkerforgeException e) {
					return;
				}
			}
		}
	}

	private final class EnumeratedHandler implements
			IPConnection.EnumerateListener {
		public void enumerate(String uid, String connectedUid, char position,
				short[] hardwareVersion, short[] firmwareVersion,
				int deviceIdentifier, short enumerationType) {

			KrollDict res = new KrollDict();
			res.put("UID", uid);
			res.put("Enumeration Type", enumerationType);
			if (enumerationType == IPConnection.ENUMERATION_TYPE_DISCONNECTED) {
				res.put("connected", IPConnection.ENUMERATION_TYPE_DISCONNECTED);

			} else {
				res.put("connected", IPConnection.ENUMERATION_TYPE_CONNECTED);
				res.put("connectedUID", connectedUid);
				res.put("position", position);
				res.put("hardwareVersion", hardwareVersion[0] + "."
						+ hardwareVersion[1] + "." + hardwareVersion[2]);
				res.put("firmwareVersion", firmwareVersion[0] + "."
						+ firmwareVersion[1] + "." + firmwareVersion[2]);
				res.put("deviceIdentifier ", deviceIdentifier);
			}
			devices.put(uid, res);
			if (proxy.hasListeners("enumerated")) {
				proxy.fireEvent("enumerated", res);
			}
			if (onEnumeratedCallback != null)
				onEnumeratedCallback.call(getKrollObject(), res);
		}
	}

	public ConnectionProxy(KrollProxy proxy) {
		super();
		this.proxy = proxy;
		this.props = TiApplication.getInstance().getAppProperties();

	}

	@Override
	public void handleCreationArgs(KrollModule createdInModule, Object[] args) {
		if (args.length == 0) {
			Log.e(LCAT, " paramter aspected");
			return;
		}
		if (!(args[0] instanceof String)) {
			Log.e(LCAT, "endpoint must be a String");
			return;
		} else {
			String[] parts = ((String) args[1]).split(":");
			if (parts != null) {
				this.ip = parts[0];
				this.port = Integer.parseInt(parts[1]);
			}
		}
		if (args.length > 1 && args[1] != null
				&& args[1] instanceof KrollFunction) {
			onConnectedCallback = (KrollFunction) args[1];
		}
		ipcon = new IPConnection();
		try {
			ipcon.connect(ip, port);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (AlreadyConnectedException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		ipcon.addConnectedListener(new ConnectedHandler());
		ipcon.addEnumerateListener(new EnumeratedHandler());
		try {
			ipcon.enumerate();
		} catch (NotConnectedException e) {
			e.printStackTrace();
		}
	}

	@Kroll.method
	public void disconnect() {
		try {
			this.ipcon.disconnect();
		} catch (NotConnectedException e) {
			e.printStackTrace();
		}
	}

}