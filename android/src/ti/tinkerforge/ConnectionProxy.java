/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.tinkerforge;

import java.io.IOException;
import java.net.UnknownHostException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;

import com.tinkerforge.AlreadyConnectedException;
import com.tinkerforge.IPConnection;
import com.tinkerforge.NotConnectedException;

// This proxy can be created by calling Tinkerforge.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TinkerforgeModule.class)
public class ConnectionProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "TiFo";
	private String ip = "localhost";
	private int port = 4223;
	private KrollFunction onLoadCallback;
	private IPConnection ipcon;

	public ConnectionProxy() {
		super();
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options) {
		super.handleCreationDict(options);
		if (options.containsKeyAndNotNull("ip")) {
			ip = options.getString("ip");
		}
		if (options.containsKeyAndNotNull("port")) {
			port = options.getInt("port");
		}
		if (options.containsKeyAndNotNull("onload")) {
			Object o = options.get("onload");
			if (o instanceof KrollFunction)
				onLoadCallback = (KrollFunction) o;
		}
		connect();
	}

	private void connect() {
		this.ipcon = new IPConnection();
		try {
			ipcon.connect(ip, port);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (AlreadyConnectedException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		// Register enumerate listener and print incoming information
		ipcon.addEnumerateListener(new IPConnection.EnumerateListener() {
			public void enumerate(String uid, String connectedUid,
					char position, short[] hardwareVersion,
					short[] firmwareVersion, int deviceIdentifier,
					short enumerationType) {
				KrollDict res = new KrollDict();
				res.put("UID", uid);
				res.put("Enumeration Type", enumerationType);
				res.put("connectedUID", connectedUid);
				res.put("position", position);
				res.put("hardwareVersion", hardwareVersion[0] + "."
						+ hardwareVersion[1] + "." + hardwareVersion[2]);
				res.put("firmwareVersion", firmwareVersion[0] + "."
						+ firmwareVersion[1] + "." + firmwareVersion[2]);
				res.put("deviceIdentifier ", deviceIdentifier);
				onLoadCallback.call(getKrollObject(), res);
			}
		});

		try {
			ipcon.enumerate();
		} catch (NotConnectedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@Kroll.method
	public void disconnect() {
		try {
			this.ipcon.disconnect();
		} catch (NotConnectedException e) {
			e.printStackTrace();
		}
	}
}